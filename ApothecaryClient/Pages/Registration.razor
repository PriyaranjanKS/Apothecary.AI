@page "/registration"
@inject TranslationService TranslationService
@using System.ComponentModel.DataAnnotations
@using System.Text;
@using ApothecaryShared
@using Newtonsoft.Json
@inject HttpClient HttpClient

@if (isPageLoading || translations == null || translations.Count == 0)
{
    <div class="neumorphic-overlay">
        <div class="neumorphic-overlay-content">
            <div class="spinner"></div>
            <p>Loading, Please Wait...</p>
        </div>
    </div>
}

@if (isProcessing)
{
    <!-- Neumorphic overlay for processing -->
    <div class="neumorphic-overlay">
        <div class="neumorphic-overlay-content">
            <div class="spinner"></div>
            <p>Extracting the ID Card Content, Please wait...</p>
        </div>
    </div>
}

@if (isTranslating)
{
    <!-- Neumorphic overlay for translating -->
    <div class="neumorphic-overlay">
        <div class="neumorphic-overlay-content">
            <div class="spinner"></div>
            <p>Processing language translation, Please wait...</p>
        </div>
    </div>
}
<div class="registration-page">
    <div class="image-upload-container">
        <div class="style-image-label-container">
            <img src="/images/fileupload.png" alt="Image" class="style-registration-left-image" />
            <label for="fileUpload" class="style-registration-upload registration-upload">@GetTranslation("UploadID")</label>
        </div>        
        <InputFile id="fileUpload" OnChange="HandleFileUpload" class="form-control-file" />
        @if (!string.IsNullOrEmpty(imageUrl))
        {
            <img src="@imageUrl" alt="File Upload Image" class="uploaded-image" />
        }
    </div>

    <div class="registration-container">
        <div class="style-header">
            <div class="style-header-content" >
                <img src="/images/userregistration.png" alt="Image" class="registration-style-left-image" />
                <h2 class="style-registration-title" style="font-size: 24px!important;font-weight: bold;">
                    @GetTranslation("UserRegistrationTitle")
                </h2>
            </div>
            <div class="style-locale-container">
               <div>
                    <img src="/images/translate.png" alt="Image" class="registration-style-left-image" />
                    <span class="locale-subtitle">@GetTranslation("LocaleSelector")</span>
               </div>
               
                <select id="localeSelector" @onchange="OnLocaleChange" class="locale-selector">
                    <option value="English">English</option>
                    <option value="French">French</option>
                    <option value="Japanese">Japanese</option>
                    <option value="Chinese">Chinese</option>
                    <option value="German">German</option>
                    <option value="Portuguese">Portuguese</option>
                    <!-- ... other locales ... -->
                </select>
            </div>
        </div>


        <EditForm Model="@registrationModel" OnValidSubmit="HandleValidSubmit">
            <div class="form-row">
                <div class="form-column customer-details-container">
                    <div class="registration-sub-heading-container" style="margin-left: 30%;">
                        <img src="/images/UserDetails.png" alt="Image" class="registration-left-image" />
                        <h3 class="registration-sub-heading">@GetTranslation("CustomerDetailsHeading")</h3>
                    </div>
                    <div class="form-group">
                        <label for="name">@GetTranslation("NameLabel")</label>
                        <InputText id="name" @bind-Value="registrationModel.Name" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label for="dob">@GetTranslation("DateOfBirthLabel")</label>
                        <InputDate id="dob" @bind-Value="registrationModel.DateOfBirth" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label for="gender">@GetTranslation("GenderLabel")</label>
                        <InputSelect id="gender" @bind-Value="registrationModel.Gender" class="form-control">
                            <option value="">Select...</option>
                            <option value="M">Male</option>
                            <option value="F">Female</option>
                            <option value="O">Other</option>
                        </InputSelect>
                    </div>
                    <div class="form-group">
                        <label for="address">@GetTranslation("AddressLabel")</label>
                        <InputText id="address" @bind-Value="registrationModel.Address" class="form-control" style="min-height: 70px;}" />
                    </div>
                    <div class="form-group">
                        <label for="state">@GetTranslation("StateLabel")</label>
                        <InputText id="state" @bind-Value="registrationModel.State" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label for="country">@GetTranslation("CountryLabel")</label>
                        <InputText id="country" @bind-Value="registrationModel.Country" class="form-control" />
                    </div>
                </div>

                <div class="form-column">
                    <div class="contact-details-container">
                        <div class="registration-sub-heading-container" style="margin-left: 30%;">
                            <img src="/images/UserEmail.png" alt="Image" class="registration-left-image" />
                            <h3 class="registration-sub-heading">@GetTranslation("ContactDetailsHeading")</h3>
                        </div>
                        <div class="form-group">
                            <label for="email">@GetTranslation("EmailLabel")</label>
                            <InputText id="email" @bind-Value="registrationModel.Email" class="form-control" />
                        </div>
                        <div class="form-group">
                            <label for="phone">@GetTranslation("PhoneLabel")</label>
                            <InputText id="phone" @bind-Value="registrationModel.Phone" class="form-control" />
                        </div>
                    </div>

                    <div class="additional-details-container">
                        <div class="registration-sub-heading-container" style="margin-left: 30%;">
                            <img src="/images/UserHealth.png" alt="Image" class="registration-left-image" />
                            <h3 class="registration-sub-heading">@GetTranslation("OtherDetailsHeading")</h3>
                        </div>
                        <div class="form-group">
                            <label for="additionalInfo">@GetTranslation("AdditionalDetailsLabel")</label>
                            <InputTextArea id="additionalInfo" @bind-Value="registrationModel.AdditionalDetails" class="form-control" rows="4" />
                        </div>
                        <div class="form-group">
                            <label for="conditions">@GetTranslation("PreExistingConditionsLabel")</label>
                            <InputTextArea id="conditions" @bind-Value="registrationModel.PreExistingConditions" class="form-control" rows="4" />
                        </div>
                    </div>
                </div>
            </div>
            <div class="form-group submit-group">                
                <button type="submit" class="registration-submit-button submit-button">
                    <img src="/images/UserAdd.png" alt="Image" class="registration-left-image" />
                    @GetTranslation("SubmitButton")
                </button>
                @if (!string.IsNullOrWhiteSpace(message))
                {
                    <div class="registration-success-message">@message</div>
                }
            </div>
        </EditForm>
    </div>
</div>

@code {
    private bool isPageLoading = true;
    private bool isProcessing = false;
    private bool isTranslating = false;

    private string locale = "English"; // Default locale
    private RegistrationModel registrationModel = new RegistrationModel();
    private string imageUrl;
    private string message = "";

    private Dictionary<string, string> translations = new Dictionary<string, string>();
    private Dictionary<string, string> keysToTranslate = new Dictionary<string, string>
{
    { "UploadID", "Upload ID:" },
    { "NameLabel", "Name:" },
    { "DateOfBirthLabel", "Date Of Birth:" },
    { "GenderLabel", "Gender:" },
    { "AddressLabel", "Address:" },
    { "StateLabel", "State:" },
    { "CountryLabel", "Country:" },
    { "EmailLabel", "Email:" },
    { "PhoneLabel", "Phone:" },
    { "AdditionalDetailsLabel", "Additional Details:" },
    { "PreExistingConditionsLabel", "Pre-Existing Conditions:" },
    { "SubmitButton", "Submit" },
    { "LocaleSelector", "Locale:" },
    { "CustomerDetailsHeading", "Customer Details" },
    { "ContactDetailsHeading", "Contact Details" },
    { "OtherDetailsHeading", "Other Health Details" },
    { "UserRegistrationTitle", "User Registration" },
    // ... any other keys and default texts you need to translate
};

    private async Task OnLocaleChange(ChangeEventArgs e)
    {
        isTranslating = true; // Start showing the translation waiting overlay
        locale = e.Value.ToString();
        translations = await TranslationService.GetTranslationsAsync(locale, keysToTranslate);
        isTranslating = false; // Translation finished, hide the waiting overlay
        StateHasChanged(); // Notify Blazor to re-render the page
    }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Initialization started.");
        // Initially set to true to show the loading overlay
        isPageLoading = true;
        StateHasChanged();
        try
        {
            translations = await TranslationService.GetTranslationsAsync(locale, keysToTranslate);

            // Simulate a delay for testing purposes
            //await Task.Delay(3000); // Delay for 3 seconds

            // Debugging - Check if translations are fetched
            Console.WriteLine("Translations fetched.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during initialization: {ex.Message}");
        }
        finally
        {
            // Debugging - Check if we reach this point and set the flag to false
            Console.WriteLine("Initialization completed.");

            isPageLoading = false; // Set this to false after initialization is done
            StateHasChanged(); // Ensure the UI is updated
        }
    }
    private async Task HandleValidSubmit()
    {
        try
        {
            Console.WriteLine($"Making request to: {HttpClient.BaseAddress}api/registration");
            var response = await HttpClient.PostAsJsonAsync("api/registration", registrationModel);

            if (response.IsSuccessStatusCode)
            {
                message = "Registration successful";
                StateHasChanged();
            }
            else
            {
                // Optionally, read the response content for more details
                var responseContent = await response.Content.ReadAsStringAsync();
                message = $"Registration failed: {responseContent}";
            }
        }
        catch (Exception ex)
        {
            // Log the exception details if needed
            message = $"Error occurred: {ex.Message}";
        }
    }
    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        isProcessing = true; // Show the overlay
        var imageFile = e.File;
        if (imageFile != null)
        {
            try
            {
                // Read the file into a buffer
                var buffer = new byte[imageFile.Size];
                await imageFile.OpenReadStream().ReadAsync(buffer);

                // Convert the buffer to a base64 string and assign it to imageUrl
                // for displaying the image on the page
                imageUrl = $"data:{imageFile.ContentType};base64,{Convert.ToBase64String(buffer)}";

                // Prepare the file data for sending to the server
                var fileData = new
                {
                    FileName = imageFile.Name,
                    ContentType = imageFile.ContentType,
                    Content = Convert.ToBase64String(buffer)
                };

                // Serialize the file data to JSON
                var jsonContent = JsonConvert.SerializeObject(fileData);

                // Send the JSON content to the API
                var response = await HttpClient.PostAsync(
                    "api/registration/uploadImage",
                    new StringContent(jsonContent, Encoding.UTF8, "application/json"));

                // Handle the response
                if (response.IsSuccessStatusCode)
                {
                    var responseContent = await response.Content.ReadAsStringAsync();
                    var extractedData = JsonConvert.DeserializeObject<RegistrationModel>(responseContent);

                    // Update registrationModel with the extracted data
                    registrationModel.Name = extractedData.Name;
                    try
                    {
                        // Directly converting string to DateTime
                        registrationModel.DateOfBirth = Convert.ToDateTime(extractedData.DateOfBirth);
                    }
                    catch
                    {
                        // If conversion fails, set DateOfBirth to null
                        registrationModel.DateOfBirth = null;
                    }
                    registrationModel.Gender = extractedData.Gender;
                    registrationModel.Address = extractedData.Address;
                    registrationModel.State = extractedData.State;
                    registrationModel.Country = extractedData.Country;

                    message = "ID Card Image uploaded and content extracted";
                }
                else
                {
                    message = "ID Card Image upload and content extraction failed";
                }
            }
            catch (Exception ex)
            {
                message = $"Error during file upload: {ex.Message}";
            }
            finally
            {
                isProcessing = false; // Ensure this is called even if an error occurs
                StateHasChanged(); // Re-render the component to hide the overlay
            }
        }
    }

    private string GetTranslation(string key)
    {
        if (translations != null && translations.TryGetValue(key, out var value))
        {
            if (value.Contains(":"))
            {
                value = value.Replace(":", "");
            }
            return value;
        }
        if (keysToTranslate.TryGetValue(key, out var defaultValue))
        {
            if (defaultValue.Contains(":"))
            {
                defaultValue = defaultValue.Replace(":", "");
            }
            return defaultValue; // Return the hard-coded default value
        }
      
        return $"[Missing translation for '{key}']"; // Fallback text
    }
        /*
     private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
    isProcessing = true; // Show the overlay
    var imageFile = e.File;
    if (imageFile != null)
        {
        // Read the file into a buffer
        var buffer = new byte[imageFile.Size];
        await imageFile.OpenReadStream().ReadAsync(buffer);

        // Convert the buffer to a base64 string and assign it to imageUrl
        // for displaying the image on the page
        imageUrl = $"data:{imageFile.ContentType};base64,{Convert.ToBase64String(buffer)}";

        // Prepare the file data for sending to the server
        var fileData = new
            {
            FileName = imageFile.Name,
            ContentType = imageFile.ContentType,
            Content = Convert.ToBase64String(buffer)
        };

        // Serialize the file data to JSON
        var jsonContent = JsonConvert.SerializeObject(fileData);

        // Send the JSON content to the API
        var response = await HttpClient.PostAsync(
            "api/registration/uploadImage",
            new StringContent(jsonContent, Encoding.UTF8, "application/json"));

        // Handle the response
        if (response.IsSuccessStatusCode)
            {
            var responseContent = await response.Content.ReadAsStringAsync();
            var extractedData = JsonConvert.DeserializeObject<RegistrationModel>(responseContent);

            // Update registrationModel with the extracted data
            registrationModel.Name = extractedData.Name;
            try
                {
                // Directly converting string to DateTime
                registrationModel.DateOfBirth = Convert.ToDateTime(extractedData.DateOfBirth);
            }
            catch
                {
                // If conversion fails, set DateOfBirth to null
                registrationModel.DateOfBirth = null;
            }
            registrationModel.Gender = extractedData.Gender;
            registrationModel.Address = extractedData.Address;
            registrationModel.State = extractedData.State;
            registrationModel.Country = extractedData.Country;
            isProcessing = false; // Hide the overlay
            message = "ID Card Image uploaded and content extracted";
        }
        else
            {
            message = "ID Card Image upload and content extraction failed";
            }
        }
    }

    */

}
