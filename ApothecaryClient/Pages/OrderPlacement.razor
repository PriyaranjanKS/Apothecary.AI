@page "/order-placement"
@using ApothecaryShared
@using Newtonsoft.Json
@using System.Text
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

@if (isProductListLoading)
{
    <div class="product-loading-overlay">
        <div class="product-loading-content">
            <div class="product-spinner-container">
                <div class="product-spinner"></div>
            </div>
            <p>Loading, Please wait...</p>
        </div>
    </div>
}
@if (isUploadModalVisible)
{
    <div class="modal-backdrop" @onclick="HideUploadImageModal">
        <div class="modal-content" @onclick:stopPropagation="true">
            <label for="file-upload" class="modal-file-label">Image Selection</label>
            <input type="file" id="file-upload" class="modal-file-input" @ref="inputFileElement"
                   @onchange="ShowImagePreview" />
            @if (imageDataUrl != null)
            {
                <img src="@imageDataUrl" alt="Image preview" style="max-width: 150px; height: auto; margin-top: 10px;" />
            }
            <button class="modal-upload-btn" @onclick="OnFileSelected">Upload Image</button>
            @if (isMedicineImageProcessing)
            {
                <div style="display: flex; align-items: center; margin-top: 15px;">
                    <div class="medicineImageSpinner"></div>
                    <span style="margin-left: 10px;">Medicine image being analyzed...</span>
                </div>
            }
        </div>
    </div>
}

@if (showAlternatePopup)
{
    <div class="alternate-popup-overlay" @onclick="CloseAlternatePopup">
        <div class="alternate-popup-content" @onclick:stopPropagation="true">
            <h2 class="alternate-popup-header">Alternate Medicine Suggestion</h2>
            @if (isFetchingAlternateSuggestion)
            {
                <div class="alternate-fetching-container">
                    <div class="alternate-popup-spinner"></div>
                    <p class="alternate-fetching-text">Fetching alternate medicine suggestion,Please wait!</p>
                </div>
            }
            else
            {
                <p class="alternate-popup-message">@alternatePopupMessage</p>
                <button class="alternate-popup-close-btn" @onclick="CloseAlternatePopup">OK</button>
            }
        </div>
    </div>
}
@if (showMedicineWarningPopup)
{
    <div class="medicine-warning-popup-overlay" @onclick="CloseMedicineWarningPopup">
        <div class="medicine-warning-popup-content" @onclick:stopPropagation="true">
            <h2 class="medicine-warning-popup-header">Medicine Warning</h2>
            @if (isFetchingMedicineWarning)
            {
                <div class="medicine-warning-fetching-container">
                    <div class="medicine-warning-popup-spinner"></div>
                    <p class="medicine-warning-fetching-text">Fetching medicine warning, please wait...</p>
                </div>
            }
            else
            {
                <p class="medicine-warning-popup-message">@medicineWarningPopupMessage</p>
                <button class="medicine-warning-popup-close-btn" @onclick="CloseMedicineWarningPopup">OK</button>
            }
        </div>
    </div>
}
@if (showGdprPopup)
{
    <div class="gdpr-popup-overlay" @onclick="CloseGdprPopup">
        <div class="gdpr-popup-content" @onclick:stopPropagation="true">
            <span class="gdpr-close-icon" @onclick="CloseGdprPopup">X</span>
            <h2 class="gdpr-popup-header">Personal Information</h2>
            @if (isFetchingDetails)
            {
                <div class="gdpr-spinner-container">
                    <div class="gdpr-spinner"></div>
                    <p class="gdpr-spinner-text">Checking for Personal Details in the system...</p>
                </div>
            }
            else
            {
                <p class="gdpr-popup-message">@gdprPopupMessage</p>
                <button class="gdpr-clear-btn" @onclick="ClearPersonalDetails">
                    Clear Personal Details
                </button>
            }
        </div>
    </div>
}

<div class="order-placement-container">
    <aside class="control-panel neumorphic">
        <h3 class="group-heading">Order Placement</h3>
        <div class="button-group-neumorphic">

            <button class="action-btn voice-order-btn neumorphic single-btn" @onclick="OpenVoiceOrderModal">Voice Assisted Ordering</button>

            @if (showVoiceOrderModal)
            {
                <div class="whisper-modal-overlay" @onclick="CloseVoiceOrderModal">
                    <div class="whisper-modal-content" @onclick:stopPropagation="true">
                        <h2 class="whisper-modal-header">Voice Assisted Ordering</h2>
                        <div>
                            <button class="whisper-button" @onclick="StartRecording">Start Recording</button>
                            <button class="whisper-button" @onclick="StopRecording" disabled="@(!isRecording)">Stop Recording</button>
                            <button class="whisper-button" @onclick="PlayRecording" disabled="@string.IsNullOrEmpty(audioData)">Play Recording</button>
                            @if (showPlaceOrderButton)
                            {
                                <button class="btn place-order-btn neumorphic form-label" style="background: lightgreen; color: darkgrey;" @onclick="OnAddToCart">
                                    Add to Cart
                                </button>
                            }
                            <div>@message</div>
                        </div>
                    </div>
                </div>
            }

            <button class="action-btn upload-prescription-btn neumorphic single-btn"
                    @onclick="() => ShowUploadImageModal(true)">
                Upload Prescription
            </button>
            <button class="action-btn upload-btn neumorphic single-btn"
                    @onclick="() => ShowUploadImageModal(false)">
                Upload Image
            </button>
        </div>
        <h3 class="group-heading">Personalization</h3>
        <div class="button-group-neumorphic">
            
            <button class="action-btn alternate-suggestions-btn neumorphic single-btn" @onclick="ShowAlternateSuggestionPopup">Alternate Suggestions</button>
            <button class="action-btn medicine-warnings-btn neumorphic single-btn"
                    @onclick="ShowMedicineWarningPopup">
                Medicine Warnings
            </button>
            <button class="action-btn gdpr-checker-btn neumorphic single-btn"
                    @onclick="ShowGdprPopup">
                GDPR Checker
            </button>
        </div>
    </aside>

    <main class="main-content neumorphic">
        <div class="user-info neumorphic">
            <label for="userName">User Name:</label>
            <input type="text" id="userName" class="input-control form-label" @bind="userName" placeholder="Enter your name" />
        </div>

        <section class="product-selection neumorphic">
            <div class="form-group">
                <label class="form-label" for="product">Product:</label>
                <select id="product" class="input-control form-label" @bind="selectedMedicine">
                    <option value="">Select Product</option>
                    @foreach (var name in medicineNames)
                    {
                        <option value="@name">@name</option>
                    }
                </select>
                     
             
            </div>
            <div class="form-group">
                <label class="form-label"  for="unitPrice">Unit Price:</label>
                <input type="number" id="unitPrice" class="input-control form-label" placeholder="Unit Price" />
            </div>
            <div class="form-group">
                <label class="form-label"  for="quantity">Quantity:</label>
                <input type="number" id="quantity" class="input-control form-label" placeholder="Quantity" />
            </div>
            <button class="action-btn add-to-cart-btn neumorphic form-label">Add To Cart</button>
        </section>
    </main>

    <aside class="cart neumorphic">
        <h3 class="group-heading">Orders in Cart</h3>
        <table class="cart-table form-label">
            <thead>
                <tr>
                    <th>Medicine Name</th>
                    <th>Quantity</th>
                    <th>Unit Price</th>
                    <th>Total Price</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody class="form-label">
                @foreach (var order in cartOrders)
                {
                    <tr>
                        <td>@order.ProductName</td>
                        <td>@order.Quantity</td>
                        <td>$@order.UnitPrice</td>
                        <td>$@order.TotalPrice</td>
                        <td>
                            <button class="btn remove-btn neumorphic form-label"
                                    @onclick="() => RemoveFromCart(order)">
                                Remove
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <div class="cart-footer">
            <span class="total-bill form-label">Total Bill Value: $@cartOrders.Sum(o => o.TotalPrice)</span>
           <button class="btn place-order-btn neumorphic form-label" @onclick="OnPlaceOrder">Place Order</button>

        </div>
    </aside>
</div>

@code {
    private string userName; 
    private bool isUploadModalVisible = false;
    private ElementReference inputFileElement;
    private List<string> medicineNames = new List<string>();
    private string selectedMedicine;
    private bool isMedicineImageProcessing = false;
    private string imageDataUrl;
    private DotNetObjectReference<OrderPlacement> componentReference;
    private bool isPrescriptionUpload = false; // New variable to track if it's a prescription upload
    private List<MedicineOrder> cartOrders = new List<MedicineOrder>();
    private bool showAlternatePopup = false;
    private string alternatePopupMessage = "";
    private bool isFetchingAlternateSuggestion = false;
    private bool isProductListLoading = true;
    // New property and method for medicine warnings
    private string medicineWarningPopupMessage = "";
    private bool isFetchingMedicineWarning = false;
    private bool showMedicineWarningPopup = false;
    private bool showGdprPopup = false;
    private string gdprPopupMessage = "";
    private bool isFetchingDetails = false;

    private bool showVoiceOrderModal = false;
    private bool isRecording = false;
    private string audioFileUrl = "";
    private string message = "";
    private string audioData = ""; // Base64 encoded audio data
    private VoiceOrderResponse voiceOrderResponse = new VoiceOrderResponse();
    private bool showPlaceOrderButton = false;

    private void OpenVoiceOrderModal() => showVoiceOrderModal = true;

    private void CloseVoiceOrderModal() => showVoiceOrderModal = false;

    private async Task StartRecording()
    {
        try
        {
            isRecording = true;
            await JSRuntime.InvokeVoidAsync("interop.startRecording");
            
        }
        catch (Exception ex)
        {
            message = $"An error occurred: {ex.Message}";
        }
   
    }

    private async Task StopRecording()
    {
        try
        {
            isRecording = false;
            audioData = await JSRuntime.InvokeAsync<string>("interop.stopRecording");
            message = "Processing voice command...";
            StateHasChanged();

            var requestData = new { AudioData = audioData };
            var jsonContent = JsonConvert.SerializeObject(requestData);
            var content = new StringContent(jsonContent, Encoding.UTF8, "application/json");
            var response = await Http.PostAsync("api/voiceprocessing/voice", content);

            if (response.IsSuccessStatusCode)
            {
                var jsonResponse = await response.Content.ReadAsStringAsync();
                voiceOrderResponse = JsonConvert.DeserializeObject<VoiceOrderResponse>(jsonResponse);
                message = "Translated Text : " + voiceOrderResponse.Translation;

                // Directly assign the orders from the response to cartOrders
                cartOrders = voiceOrderResponse.Orders;

                showPlaceOrderButton = true;
            }
            else
            {
                message = "Failed to process voice command. Please try again.";
                showPlaceOrderButton = false;
            }
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
            showPlaceOrderButton = false;
        }
        finally
        {
            StateHasChanged();
        }
    }




    private async Task PlayRecording()
    {
        await JSRuntime.InvokeVoidAsync("interop.playRecording", audioData);
    }
    private void OnAddToCart()
    {
        // This assumes you have a method to process the order in your cart
        ProcessOrder(cartOrders);
        CloseVoiceOrderModal();
       // NavigationManager.NavigateTo("/order-confirmation");
    }
    private void ProcessOrder(List<MedicineOrder> orders)
    {
        try
        {             
            // Clear existing cart orders and add new ones
            //cartOrders.Clear();
            //cartOrders.AddRange(orders);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            message = $"An error occurred while populating the cart: {ex.Message}";
        }
        finally
        {
            StateHasChanged(); // This will refresh the UI to show the updated cart
        }
    }
 
    private void PopulateCart(string orderJson)
    {
        try
        {
            // Deserialize the JSON string to a list of orders
            var orders = JsonConvert.DeserializeObject<List<MedicineOrder>>(orderJson);

            // Clear existing cart orders and add new ones
            cartOrders.Clear();
            cartOrders.AddRange(orders);
        }
        catch (Exception ex)
        {
            message = $"An error occurred while populating the cart: {ex.Message}";
        }
        finally
        {
            StateHasChanged(); // This will refresh the UI to show the updated cart
        }
    }
    private void ShowGdprPopup()
    {
        showGdprPopup = true;
        FetchPersonalDetails();
    }

    private async Task FetchPersonalDetails()
    {
        isFetchingDetails = true;
        try
        {
            var requestData = new
            {
                UserName = userName,
                ActionToBeDone = "Fetch Personal Details"
            };

            var content = new StringContent(JsonConvert.SerializeObject(requestData), Encoding.UTF8, "application/json");
            var response = await Http.PostAsync("api/gdpr/data-compliance", content);
            if (response.IsSuccessStatusCode)
            {
                var jsonResponse = await response.Content.ReadAsStringAsync();
                var responseObj = JsonConvert.DeserializeObject<GDPRResponse>(jsonResponse);
                gdprPopupMessage = responseObj.GDPROutput;
            }
            else
            {
                gdprPopupMessage = "Failed to fetch personal details.";
            }
        }
        catch (Exception ex)
        {
            gdprPopupMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isFetchingDetails = false;
            StateHasChanged(); // This ensures the UI is updated with the new message
        }
    }


    private async Task ClearPersonalDetails()
    {
        isFetchingDetails = true;
        try
        {
            var requestData = new
            {
                UserName = userName,
                ActionToBeDone = "Delete Personal Details"
            };

            var content = new StringContent(JsonConvert.SerializeObject(requestData), Encoding.UTF8, "application/json");
            var response = await Http.PostAsync("api/gdpr/data-compliance", content);
            if (response.IsSuccessStatusCode)
            {
                gdprPopupMessage = "Personal details have been cleared from the back end.";
            }
            else
            {
                gdprPopupMessage = "Failed to clear personal details.";
            }

        }
        catch (Exception ex)
        {
            gdprPopupMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isFetchingDetails = false;
            StateHasChanged();
        }
    }

    private void CloseGdprPopup()
    {
        showGdprPopup = false;
    }
    private async Task ShowMedicineWarningPopup()
    {
        if (string.IsNullOrEmpty(selectedMedicine) || string.IsNullOrEmpty(userName))
        {
            medicineWarningPopupMessage = "Please select a medicine and enter your name.";
            showMedicineWarningPopup = true;
        }
        else
        {
            isFetchingMedicineWarning = true;
            showMedicineWarningPopup = true;

            try
            {
                var requestData = new
                {
                    MedicineName = selectedMedicine,
                    UserName = userName
                };

                var content = new StringContent(JsonConvert.SerializeObject(requestData), Encoding.UTF8, "application/json");
                var response = await Http.PostAsync("api/medicinewarnings/get-warning", content);

                if (response.IsSuccessStatusCode)
                {
                    var jsonResponse = await response.Content.ReadAsStringAsync();
                    var responseData = JsonConvert.DeserializeObject<dynamic>(jsonResponse);
                    medicineWarningPopupMessage = responseData?.medicineWarning;
                }
                else
                {
                    medicineWarningPopupMessage = "Failed to fetch medicine warnings.";
                }
            }
            catch (Exception ex)
            {
                medicineWarningPopupMessage = $"An error occurred while fetching medicine warnings: {ex.Message}";
            }
            finally
            {
                isFetchingMedicineWarning = false;
            }
        }
    }


    private void CloseMedicineWarningPopup()
    {
        showMedicineWarningPopup = false;
    }

    private async Task ShowAlternateSuggestionPopup()
    {
        if (string.IsNullOrEmpty(selectedMedicine) || selectedMedicine == "Select Product")
        {
            alternatePopupMessage = "Select a product first to get the alternate medicine suggestion";
            showAlternatePopup = true;
        }
        else
        {
            isFetchingAlternateSuggestion = true; // We start fetching the suggestion
            showAlternatePopup = true; // Show the popup immediately with the spinner

            try
            {
                var content = new StringContent(JsonConvert.SerializeObject(new { MedicineName = selectedMedicine }), Encoding.UTF8, "application/json");
                var response = await Http.PostAsync("api/alternatemedicine/get-suggestion", content);

                // Process the response after it is received
                if (response.IsSuccessStatusCode)
                {
                    var jsonResponse = await response.Content.ReadAsStringAsync();
                    var responseData = JsonConvert.DeserializeObject<dynamic>(jsonResponse);
                    alternatePopupMessage = responseData?.alternateMedicine;
                }
                else
                {
                    alternatePopupMessage = "Failed to fetch suggestion";
                }
            }
            catch (Exception ex)
            {
                alternatePopupMessage = $"Error occurred: {ex.Message}";
            }
            finally
            {
                isFetchingAlternateSuggestion = false; // We finished fetching the suggestion
            }
        }
    }

    private void CloseAlternatePopup()
    {
        showAlternatePopup = false;
    }
    private void ShowUploadImageModal(bool isPrescription)
    {
        isPrescriptionUpload = isPrescription;
        isUploadModalVisible = true;
    }

    protected override void OnInitialized()
    {
        componentReference = DotNetObjectReference.Create(this);
    }

    [JSInvokable]
    public async Task SetImagePreview(string imageDataUrl)
    {
        this.imageDataUrl = imageDataUrl;
        await InvokeAsync(StateHasChanged);
    }

    private async Task ShowImagePreview()
    {
        await JSRuntime.InvokeVoidAsync("interop.showImagePreview", inputFileElement, componentReference);
    }


    // Dispose the DotNetObjectReference to avoid memory leaks
    public void Dispose()
    {
        componentReference?.Dispose();
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await FetchMedicineList();
        }
        catch (Exception ex)
        {
            // Handle the exception
            // You might want to log this exception or display an error message
            Console.WriteLine("An error occurred: " + ex.Message);
        }
    }

    private async Task HandleImageFiles(ChangeEventArgs e)
    {
        if (e.Value is not IReadOnlyList<IBrowserFile> imageFiles || imageFiles.Count == 0)
            return;

        var imageFile = imageFiles.First();
        var format = "image/png";
        var resizedImage = await imageFile.RequestImageFileAsync(format, 640, 480);

        using var stream = resizedImage.OpenReadStream();
        using var ms = new MemoryStream();
        await stream.CopyToAsync(ms);
        imageDataUrl = $"data:{format};base64,{Convert.ToBase64String(ms.ToArray())}";
        StateHasChanged(); // Refresh the UI to show the preview
    }

    private async Task FetchMedicineList()
    {
        isProductListLoading = true; // Set to true to show spinner
        try
        {
            var response = await Http.GetFromJsonAsync<List<string>>("api/medicines/getall");
            if (response != null)
            {
                medicineNames = response;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("An error occurred: " + ex.Message);
        }
        finally
        {
            isProductListLoading = false; // Set to false to hide spinner
            StateHasChanged(); // Refresh the UI
        }
    }

    private void ShowUploadImageModal()
    {
        isUploadModalVisible = true;
    }

    private async Task OnFileSelected()
    {
        isMedicineImageProcessing = true;
        try
        {
            var base64File = await JSRuntime.InvokeAsync<string>("interop.readFileAsBase64", inputFileElement);
            if (!string.IsNullOrEmpty(base64File))
            {
                if (isPrescriptionUpload)
                {
                    // Handle prescription processing
                    await ProcessPrescription(base64File);
                    isPrescriptionUpload = false; // Reset the flag
                }
                else
                {
                    // Show a loading indicator here if you like
                    var requestData = new { base64Image = base64File };
                    // var response = await Http.PostAsJsonAsync("api/imageprocessing/extracttext", new { ImageData = base64File });
                    var response = await Http.PostAsJsonAsync("api/imageprocessing/extracttext", requestData);
                    if (response.IsSuccessStatusCode)
                    {
                        var extractedText = await response.Content.ReadAsStringAsync();
                        selectedMedicine = extractedText; // Set the extracted medicine name
                        isMedicineImageProcessing = false;
                        StateHasChanged(); // Notify the component to re-render
                    }
                    else
                    {
                        // Handle errors, perhaps log them or show to the user
                        // TODO: Implement error handling logic here
                    }
                }
               
            }
        }
        catch (Exception ex)
        {
            isMedicineImageProcessing = false;
            isUploadModalVisible = false;
        }
        finally
        {
            isMedicineImageProcessing = false;
            isUploadModalVisible = false;
           
        }
    }
    private async Task ProcessPrescription(string base64Image)
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/prescription/extract-prescription",
                new PrescriptionImageDataModel { Base64Image = base64Image });

            if (response.IsSuccessStatusCode)
            {
                var jsonResponse = await response.Content.ReadAsStringAsync();
                var responseData = JsonConvert.DeserializeObject<dynamic>(jsonResponse);
                var extractedContent = responseData?.ToString();

                if (!string.IsNullOrEmpty(extractedContent))
                {
                    var medicineOrders = JsonConvert.DeserializeObject<List<MedicineOrder>>(extractedContent);
                    cartOrders = medicineOrders; // Update the cart orders list
                    StateHasChanged(); // Update the UI
                }
            }
            else
            {
                // Handle non-successful response
                var errorResponse = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"API Error: {errorResponse}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception occurred: {ex.Message}");
        }
    }

    private void RemoveFromCart(MedicineOrder orderToRemove)
    {
        cartOrders.Remove(orderToRemove);
        StateHasChanged(); // Refresh the UI
    }
     private void OnPlaceOrder()
    {
        // Here we navigate to the PaymentProcess page with the order details
        var serializedCartOrders = JsonConvert.SerializeObject(cartOrders);
        NavigationManager.NavigateTo($"/payment-process/{serializedCartOrders}");
    }
    // private void AddToCart(MedicineOrder order)
    // {
    //     // Implement logic to add the medicine order to the cart
    //     // ...
    // }

    private void HideUploadImageModal()
    {
        isUploadModalVisible = false;
        StateHasChanged();
    }
    public class GDPRResponse
    {
        [JsonProperty("GDPROutput")]
        public string GDPROutput { get; set; }
    }
    
    public class VoiceOrderResponse
    {
        public string Translation { get; set; }
        public List<MedicineOrder> Orders { get; set; } // Change to a list of MedicineOrder
    }
}