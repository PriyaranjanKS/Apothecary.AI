@page "/order-placement"
@using ApothecaryShared
@using Newtonsoft.Json
@using System.Text
@inject HttpClient Http
@inject IJSRuntime JSRuntime

@if (isUploadModalVisible)
{
    <div class="modal-backdrop" @onclick="HideUploadImageModal">
        <div class="modal-content" @onclick:stopPropagation="true">
            <label for="file-upload" class="modal-file-label">Image Selection</label>
            <input type="file" id="file-upload" class="modal-file-input" @ref="inputFileElement"
                   @onchange="ShowImagePreview" />
            @if (imageDataUrl != null)
            {
                <img src="@imageDataUrl" alt="Image preview" style="max-width: 150px; height: auto; margin-top: 10px;" />
            }
            <button class="modal-upload-btn" @onclick="OnFileSelected">Upload Image</button>
            @if (isMedicineImageProcessing)
            {
                <div style="display: flex; align-items: center; margin-top: 15px;">
                    <div class="medicineImageSpinner"></div>
                    <span style="margin-left: 10px;">Medicine image being analyzed...</span>
                </div>
            }
        </div>
    </div>
}

@if (showAlternatePopup)
{
    <div class="alternate-popup-overlay" @onclick="CloseAlternatePopup">
        <div class="alternate-popup-content" @onclick:stopPropagation="true">
            <h2 class="alternate-popup-header">Alternate Medicine Suggestion</h2>
            <p class="alternate-popup-message">@alternatePopupMessage</p>
            <button class="alternate-popup-close-btn" @onclick="CloseAlternatePopup">OK</button>
        </div>
    </div>
}


<div class="order-placement-container">
    <aside class="control-panel neumorphic">
        <h3 class="group-heading">Order Placement</h3>
        <div class="button-group-neumorphic">
          
            <button class="action-btn voice-order-btn neumorphic single-btn">Voice Assisted Ordering</button>
            <button class="action-btn upload-prescription-btn neumorphic single-btn"
                    @onclick="() => ShowUploadImageModal(true)">
                Upload Prescription
            </button>
            <button class="action-btn upload-btn neumorphic single-btn"
                    @onclick="() => ShowUploadImageModal(false)">
                Upload Image
            </button>
        </div>
        <h3 class="group-heading">Personalization</h3>
        <div class="button-group-neumorphic">
            
            <button class="action-btn alternate-suggestions-btn neumorphic single-btn" @onclick="ShowAlternateSuggestionPopup">Alternate Suggestions</button>
            <button class="action-btn medicine-warnings-btn neumorphic single-btn">Medicine Warnings</button>
            <button class="action-btn gdpr-checker-btn neumorphic single-btn">GDPR Checker</button>
        </div>
    </aside>

    <main class="main-content neumorphic">
        <div class="user-info neumorphic">
            <label for="userName">User Name:</label>
            <input type="text" id="userName" class="input-control form-label" placeholder="Enter your name" />
        </div>

        <section class="product-selection neumorphic">
            <div class="form-group">
                <label class="form-label" for="product">Product:</label>
                <select id="product" class="input-control form-label" @bind="selectedMedicine">
                    <option value="">Select Product</option>
                    @foreach (var name in medicineNames)
                    {
                        <option value="@name">@name</option>
                    }
                </select>
                     
             
            </div>
            <div class="form-group">
                <label class="form-label"  for="unitPrice">Unit Price:</label>
                <input type="number" id="unitPrice" class="input-control form-label" placeholder="Unit Price" />
            </div>
            <div class="form-group">
                <label class="form-label"  for="quantity">Quantity:</label>
                <input type="number" id="quantity" class="input-control form-label" placeholder="Quantity" />
            </div>
            <button class="action-btn add-to-cart-btn neumorphic form-label">Add To Cart</button>
        </section>
    </main>

    <aside class="cart neumorphic">
        <h3 class="group-heading">Orders in Cart</h3>
        <table class="cart-table form-label">
            <thead>
                <tr>
                    <th>Medicine Name</th>
                    <th>Quantity</th>
                    <th>Unit Price</th>
                    <th>Total Price</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody class="form-label">
                @foreach (var order in cartOrders)
                {
                    <tr>
                        <td>@order.MedicineName</td>
                        <td>@order.Quantity</td>
                        <td>$@order.UnitPrice</td>
                        <td>$@order.TotalPrice</td>
                        <td>
                            <button class="btn remove-btn neumorphic form-label"
                                    @onclick="() => RemoveFromCart(order)">
                                Remove
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <div class="cart-footer">
            <span class="total-bill form-label">Total Bill Value: $@cartOrders.Sum(o => o.TotalPrice)</span>
            <button class="btn place-order-btn neumorphic form-label">Place Order</button>
        </div>
    </aside>
</div>

@code {
    private bool isUploadModalVisible = false;
    private ElementReference inputFileElement;
    private List<string> medicineNames = new List<string>();
    private string selectedMedicine;
    private bool isMedicineImageProcessing = false;
    private string imageDataUrl;
    private DotNetObjectReference<OrderPlacement> componentReference;
    private bool isPrescriptionUpload = false; // New variable to track if it's a prescription upload
    private List<MedicineOrder> cartOrders = new List<MedicineOrder>();
    private bool showAlternatePopup = false;
    private string alternatePopupMessage = "";

    private async Task ShowAlternateSuggestionPopup()
    {
        if (string.IsNullOrEmpty(selectedMedicine) || selectedMedicine == "Select Product")
        {
            alternatePopupMessage = "Select a product first to get the alternate medicine suggestion";
            showAlternatePopup = true;
        }
        else
        {
            try
            {
                var content = new StringContent(JsonConvert.SerializeObject(new { MedicineName = selectedMedicine }), Encoding.UTF8, "application/json");
                var response = await Http.PostAsync("api/alternatemedicine/get-suggestion", content);
                if (response.IsSuccessStatusCode)
                {
                    var jsonResponse = await response.Content.ReadAsStringAsync();
                    var responseData = JsonConvert.DeserializeObject<dynamic>(jsonResponse);
                    alternatePopupMessage = responseData?.alternateMedicine;
                    showAlternatePopup = true;
                }
                else
                {
                    alternatePopupMessage = "Failed to fetch suggestion";
                    showAlternatePopup = true;
                }
            }
            catch (Exception ex)
            {
                alternatePopupMessage = $"Error occurred: {ex.Message}";
                showAlternatePopup = true;
            }
        }
    }

    private void CloseAlternatePopup()
    {
        showAlternatePopup = false;
    }
    private void ShowUploadImageModal(bool isPrescription)
    {
        isPrescriptionUpload = isPrescription;
        isUploadModalVisible = true;
    }

    protected override void OnInitialized()
    {
        componentReference = DotNetObjectReference.Create(this);
    }

    [JSInvokable]
    public async Task SetImagePreview(string imageDataUrl)
    {
        this.imageDataUrl = imageDataUrl;
        await InvokeAsync(StateHasChanged);
    }

    private async Task ShowImagePreview()
    {
        await JSRuntime.InvokeVoidAsync("interop.showImagePreview", inputFileElement, componentReference);
    }


    // Dispose the DotNetObjectReference to avoid memory leaks
    public void Dispose()
    {
        componentReference?.Dispose();
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await FetchMedicineList();
        }
        catch (Exception ex)
        {
            // Handle the exception
            // You might want to log this exception or display an error message
            Console.WriteLine("An error occurred: " + ex.Message);
        }
    }

    private async Task HandleImageFiles(ChangeEventArgs e)
    {
        if (e.Value is not IReadOnlyList<IBrowserFile> imageFiles || imageFiles.Count == 0)
            return;

        var imageFile = imageFiles.First();
        var format = "image/png";
        var resizedImage = await imageFile.RequestImageFileAsync(format, 640, 480);

        using var stream = resizedImage.OpenReadStream();
        using var ms = new MemoryStream();
        await stream.CopyToAsync(ms);
        imageDataUrl = $"data:{format};base64,{Convert.ToBase64String(ms.ToArray())}";
        StateHasChanged(); // Refresh the UI to show the preview
    }

    private async Task FetchMedicineList()
    {
        var response = await Http.GetFromJsonAsync<List<string>>("api/medicines/getall");
        if (response != null)
        {
            medicineNames = response;
        }
    }

    private void ShowUploadImageModal()
    {
        isUploadModalVisible = true;
    }

    private async Task OnFileSelected()
    {
        isMedicineImageProcessing = true;
        try
        {
            var base64File = await JSRuntime.InvokeAsync<string>("interop.readFileAsBase64", inputFileElement);
            if (!string.IsNullOrEmpty(base64File))
            {
                if (isPrescriptionUpload)
                {
                    // Handle prescription processing
                    await ProcessPrescription(base64File);
                    isPrescriptionUpload = false; // Reset the flag
                }
                else
                {
                    // Show a loading indicator here if you like
                    var requestData = new { base64Image = base64File };
                    // var response = await Http.PostAsJsonAsync("api/imageprocessing/extracttext", new { ImageData = base64File });
                    var response = await Http.PostAsJsonAsync("api/imageprocessing/extracttext", requestData);
                    if (response.IsSuccessStatusCode)
                    {
                        var extractedText = await response.Content.ReadAsStringAsync();
                        selectedMedicine = extractedText; // Set the extracted medicine name
                        isMedicineImageProcessing = false;
                        StateHasChanged(); // Notify the component to re-render
                    }
                    else
                    {
                        // Handle errors, perhaps log them or show to the user
                        // TODO: Implement error handling logic here
                    }
                }
               
            }
        }
        catch (Exception ex)
        {
            isMedicineImageProcessing = false;
            isUploadModalVisible = false;
        }
        finally
        {
            isMedicineImageProcessing = false;
            isUploadModalVisible = false;
           
        }
    }
    private async Task ProcessPrescription(string base64Image)
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/prescription/extract-prescription",
                new PrescriptionImageDataModel { Base64Image = base64Image });

            if (response.IsSuccessStatusCode)
            {
                var jsonResponse = await response.Content.ReadAsStringAsync();
                var responseData = JsonConvert.DeserializeObject<dynamic>(jsonResponse);
                var extractedContent = responseData?.ToString();

                if (!string.IsNullOrEmpty(extractedContent))
                {
                    var medicineOrders = JsonConvert.DeserializeObject<List<MedicineOrder>>(extractedContent);
                    cartOrders = medicineOrders; // Update the cart orders list
                    StateHasChanged(); // Update the UI
                }
            }
            else
            {
                // Handle non-successful response
                var errorResponse = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"API Error: {errorResponse}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception occurred: {ex.Message}");
        }
    }

    private void RemoveFromCart(MedicineOrder orderToRemove)
    {
        cartOrders.Remove(orderToRemove);
        StateHasChanged(); // Refresh the UI
    }

    // private void AddToCart(MedicineOrder order)
    // {
    //     // Implement logic to add the medicine order to the cart
    //     // ...
    // }

    private void HideUploadImageModal()
    {
        isUploadModalVisible = false;
        StateHasChanged();
    }
}