@page "/dispatch-planner"
@using System.Reflection.Metadata
@using Newtonsoft.Json
@inject HttpClient Http
<ReadinessCheckModal @ref="readinessCheckModal" OnStateChanged="() => RefreshParentComponent()" />
<SchedulePopup @ref="schedulePopup" />

@if (orders == null)
{
    <div class="dispatch-loading-overlay">
        <div class="dispatch-loading-spinner"></div>
        <p class="dispatch-loading-text">Fetching the medicine orders...</p>
    </div>
}

<div class="dispatch-container">

    <div class="dispatch-header">
        <div class="header-left">
            <div class="dispatch-button-with-image-container">
                
                <button class="dispatch-demand-forecast" @onclick="ShowDemandForecastPopup" style="font-weight:bold;color:teal;"><img src="/images/demandforecast.png" alt="Image" class="left-image" />Demand Forecast</button>
            </div>
        </div>

        <div class="header-right">
            <div class="login-neumorphic" style="min-width: 300px;margin:0px!important;padding-bottom: 10px;padding-top: 10px;">
                <img src="/images/OrderDetails.png" alt="Order Details" class="left-image" />
                <h2 class="order-details-title" style="font-weight: bold;font-size: 22px;">
                    Order Details
                </h2>
            </div>
        </div>
        <div class="header-center">
            <h2 class="dispatch-demand-forecast" style="color: teal;font-size: 16px;font-weight: bold;">
                <img src="/images/OpenOrders.png" alt="Open Orders" class="left-image" />
                Open Orders #: @orders?.Count
            </h2>
        </div>
    </div>



    <div class="dispatch-orders-grid">
        @if (orders != null)
        {
            @foreach (var order in orders)
            {
                <div class="dispatch-order-card neumorphic">
                    <div class="dispatch-order-row">
                        <div class="dispatch-order-column" style="padding-top: 20px;"> <img src="/images/medicineorder.png" alt="Open Orders" class="dispatch-left-image" />Order #: @order.OrderNumber</div>
                        <div class="dispatch-order-column">Order Date: @FormatOrderDate(order.OrderDate)</div>
                    </div>
                    <div class="dispatch-order-row">
                        <div class="dispatch-order-column">Customer Name: @order.CustomerName</div>
                        <div class="dispatch-order-column" style="padding-top: 20px;">Total Items: @order.TotalItems</div>
                    </div>
                    <div class="dispatch-order-row">
                        <div class="dispatch-order-column @GetDispatchStatusClass(order.DispatchStatus)" style="min-height:92px">
                            Dispatch Status: @GetDispatchStatusText(order.DispatchStatus)
                        </div>
                        <div class="dispatch-order-column" style="padding-top: 20px;">Readiness Check: @order.Readiness</div>
                    </div>
                    <div class="dispatchtable-order-row">
                        <div class="dispatchtable-order-actions">
                            <div class="dispatchtable-action-buttons-container">
                                <button class="dispatchtable-fraud-check-button dispatch-demand-forecast" @onclick="() => CheckFraud(order.OrderNumber)" style="min-width:150px;padding: 0px;; padding-top: 10px;  padding-bottom: 10px;">
                                    <img src="/images/fraud.png" alt="Fraud Check" class="button-image dispatch-style-left-image" style="padding: 0px;" />
                                    Fraud Check
                                </button>
                                <button class="dispatchtable-readiness-check dispatch-demand-forecast" @onclick="() => CheckReadiness(order.OrderNumber)" style="padding: 0px;min-width:170px; padding-top: 10px;  padding-bottom: 10px;">
                                    <img src="/images/checkmedicine.png" alt="Readiness Check" class="button-image dispatch-style-left-image" style="padding: 0px;" />
                                    Readiness Check
                                </button>                          
                               
                            </div>
                        </div>
                        <div class="dispatchtable-schedule-container">
                            <button class="dispatchtable-schedule dispatch-demand-forecast" style="margin-top:5px;min-width: 150px; margin-left: 35%; padding: 10px;min-width:150px" @onclick="() => OnScheduleClick(order)">
                                <img src="/images/scheduling.png" alt="Schedule Icon" style="vertical-align: middle; margin-right: 5px;" class="dispatch-style-left-image" />
                                Schedule
                            </button>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
</div>
@if (showFraudCheckPopup)
{
    <div class="fraud-check-overlay">
        <div class="fraud-check-popup neumorphic">
            <div class="fraud-check-container">
                <div class="fraud-check-spinner"></div>
                <p class="fraud-check-text">Checking prescription for potential fraud using Google PaLM...</p>
            </div>
        </div>
    </div>
}

@if (!string.IsNullOrEmpty(fraudCheckResult))
{
    <div class="fraud-check-overlay">
    <div class="fraud-check-result-popup neumorphic">
        <div class="fraud-check-result-container">
            <div class="fraud-check-result">

                <h3 style="min-width: 600px;padding: 0px;" class="demand-forecast-heading neumorphic">
                    <img src="/images/frauddetection.png" alt="Google PaLM" class="fraud-check-image" />Google PaLM Powered Fraud Check Result
                </h3>
            </div>
            <p>@fraudCheckResult</p>
            <button class="close-popup-button neumorphic" @onclick="CloseFraudCheckPopup">Close</button>
        </div>
    </div>
    </div>
}

@if (showDemandForecastPopup)
{
    <div class="demand-forecast-overlay">
        <div class="demand-forecast-popup">
            <div class="demand-forecast-container">
                <div class="demand-forecast-left neumorphic" style="height:600px">
                    <h3 class="demand-forecast-heading neumorphic" style="padding-top: 10px; padding-bottom: 10px;">
                        <img src="/images/productdemand.png" alt="Image" class="forecast-container-heading-image" />
                        Product Forecast
                    </h3>
                    <div class="demand-forecast-controls">
                        <label>Medicine Name</label>
                        <select class="medicine-dropdown neumorphic" @bind="selectedMedicine">
                            <option value="FocusFusion">FocusFusion</option>
                            <option value="DiabeControl">DiabeControl</option>
                            <option value="MorphEase">MorphEase</option>
                            <option value="MorphineInject">MorphineInject</option>
                        </select>
                        <label>Manufacturer</label>
                        <select class="manufacturer-dropdown neumorphic" @bind="selectedManufacturer">
                            <option value="ClarityWaves">ClarityWaves</option>
                            <option value="InsuLife">InsuLife</option>
                            <option value="EasePharma">EasePharma</option>
                            <option value="InjectCare">InjectCare</option>
                        </select>
                        <label>Forecast Date</label>
                        <input type="date" class="forecast-date neumorphic" @bind="selectedForecastDate">
                        <label>Unit Price</label>
                        <input type="text" class="unit-price neumorphic" @bind="selectedUnitPrice">
                        <label>Discount %</label>
                        <input type="text" class="discount neumorphic" @bind="selectedDiscount">
                        <button class="forecast-button neumorphic" @onclick="ForecastDemand">Forecast</button>
                    </div>
                </div>
                <div class="demand-forecast-right neumorphic" style="height:600px">
                    <table class="forecast-table">
                        <tr>
                            <td colspan="2" class="forecast-container-heading neumorphic">
                                <img src="/images/AzureML.png" alt="Image" class="forecast-container-heading-image" />
                                Azure ML Demand Forecast
                            </td>
                        </tr>
                        <tr style="height:150px">
                            <td colspan="2" class="forecast-container-text">@azureMLDemandForecast</td>
                        </tr>
                        <tr>
                            <td colspan="2" class="forecast-container-heading neumorphic">
                                <img src="/images/OpenAI.png" alt="Image" class="forecast-container-heading-image" />
                                Azure Open AI Suggestions
                            </td>
                        </tr>
                        <tr style="height:150px">
                            <td colspan="2" class="forecast-container-text">@azureOpenAISuggestions</td>
                        </tr>
                    </table>
                    <button class="close-popup-button neumorphic" @onclick="CloseDemandForecastPopup">Close</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Order> orders;
    private ReadinessCheckModal readinessCheckModal;
    private SchedulePopup schedulePopup;
    private bool showDemandForecastPopup = false;

    private string selectedMedicine = "FocusFusion";
    private string selectedManufacturer = "ClarityWaves";
    private DateTime selectedForecastDate = DateTime.Today;
    private string selectedUnitPrice = "";
    private string selectedDiscount = "";
    private string azureMLDemandForecast = "";
    private string azureOpenAISuggestions = "";

    private bool showFraudCheckPopup = false;
    private string fraudCheckResult = "";

    private async Task CheckFraud(string orderNumber)
    {
        try
        {
            showFraudCheckPopup = true; // Show the loading popup

            // Create a request object to send to the controller
            var fraudCheckRequest = new FraudCheckRequest { OrderNumber = orderNumber };

            // Send a POST request to the controller to initiate fraud check
            var response = await Http.PostAsJsonAsync("api/DispatchOrders/fraud-check", fraudCheckRequest);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadAsStringAsync();
                var fraudCheckResponse = JsonConvert.DeserializeObject<FraudCheckResponse>(result);

                if (fraudCheckResponse != null)
                {
                    fraudCheckResult = fraudCheckResponse.fraudCheckResult;
                   
                }
                else
                {
                    fraudCheckResult = "No fraud check result available.";
                }
            }
            else
            {
                fraudCheckResult = "Failed to check for fraud.";
            }
        }
        catch (Exception ex)
        {
            fraudCheckResult = $"An error occurred during fraud check: {ex.Message}";
        }
        finally
        {
            Console.WriteLine($"fraudCheckResult: {fraudCheckResult}");
            showFraudCheckPopup = false; // Hide the loading popup
            StateHasChanged();
        }
    }
    public class FraudCheckRequest
    {
        public string OrderNumber { get; set; }
    }

    public class FraudCheckResponse
    {
        public string fraudCheckResult { get; set; }
    }
    private void CloseFraudCheckPopup()
    {
        fraudCheckResult = ""; // Clear the fraud check result
    }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            orders = await Http.GetFromJsonAsync<List<Order>>("api/DispatchOrders");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private async Task OnScheduleClick(Order order)
    {
        if (schedulePopup != null)
        {
            await schedulePopup.ShowPopup(order.OrderNumber, order.CustomerName);
        }
    }

    private async Task CheckReadiness(string orderNumber)
    {
        await readinessCheckModal.ShowModal(orderNumber);
    }

    private string FormatOrderDate(DateTime orderDate)
    {
        return orderDate.ToString("dd/MM/yyyy");
    }

    private string GetDispatchStatusClass(string dispatchStatus)
    {
        return dispatchStatus switch
        {
            "Packaging Completed" => "dispatch-status-packaging-completed",
            "Order Accepted" => "dispatch-status-order-accepted",
            "Packaging In Progress" => "dispatch-status-packaging-in-progress",
            _ => string.Empty
        };
    }

    private string GetDispatchStatusText(string dispatchStatus)
    {
        return dispatchStatus ?? "Unknown";
    }

    private class Order
    {
        public string OrderNumber { get; set; }
        public DateTime OrderDate { get; set; }
        public string CustomerName { get; set; }
        public int TotalItems { get; set; }
        public string DispatchStatus { get; set; }
        public string Readiness { get; set; }
    }
    private void RefreshParentComponent()
    {
        StateHasChanged();
    }
    private void ShowDemandForecastPopup()
    {
        showDemandForecastPopup = true;
    }

    private void CloseDemandForecastPopup()
    {
        showDemandForecastPopup = false;
    }
    private async Task ForecastDemand()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/DispatchOrders/forecast", new ForecastRequest
                {
                    MedicineName = selectedMedicine,
                    Manufacturer = selectedManufacturer,
                    ForecastDate = selectedForecastDate,
                    UnitPrice = selectedUnitPrice,
                    Discount = selectedDiscount
                });

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<List<PowerAutomateForecastResponse>>();
                if (result != null && result.Count > 0)
                {
                    azureMLDemandForecast = Convert.ToString((int)(result[0].AzureMLDemandForecast)) + " units of "+ selectedMedicine+" will be needed as per the demand forecasting for " + selectedForecastDate;
                    azureOpenAISuggestions = result[0].AzureOpenAISuggestions;
                    StateHasChanged();
                }
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error: {errorMessage}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
    public class ForecastRequest
    {
        public string MedicineName { get; set; }
        public string Manufacturer { get; set; }
        public DateTime ForecastDate { get; set; }
        public string UnitPrice { get; set; }
        public string Discount { get; set; }
    }
    public class PowerAutomateForecastResponse
    {
        public double AzureMLDemandForecast { get; set; }
        public string AzureOpenAISuggestions { get; set; }
    }
}
